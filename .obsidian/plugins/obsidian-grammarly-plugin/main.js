/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianGrammarlyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// plugin.ts
var import_view = require("@codemirror/view");

// node_modules/@grammarly/editor-sdk/lib/index.esm.js
function t(t2, n2, r2) {
  return n2 in t2 ? Object.defineProperty(t2, n2, { value: r2, enumerable: true, configurable: true, writable: true }) : t2[n2] = r2, t2;
}
var n = /* @__PURE__ */ new Map();
var r = class extends Error {
  constructor(n2, r2) {
    super(), t(this, "args", void 0), t(this, "code", void 0), t(this, "url", void 0), t(this, "_c", void 0);
    var e2 = new URL("https://developer.grammarly.com/docs/error-explainer");
    e2.searchParams.set("code", n2.toString()), r2.forEach((t2) => e2.searchParams.append("args", function(t3) {
      if (t3 instanceof Error)
        return t3.message + "\n" + String(t3.stack);
      if (t3 == null)
        return "null";
      if (typeof t3 == "object")
        try {
          return Object.prototype.toString.call(t3);
        } catch (t4) {
        }
      return String(t3);
    }(t2))), this.stack != null && e2.searchParams.set("trace", this.stack), this.message = "Minified error #".concat(n2, ": See ").concat(e2.toString(), " for details."), this.args = r2, this.code = n2, this.url = e2.toString();
  }
  toUserMessage() {
    var t2 = n.get("".concat(this.code));
    if (t2 == null)
      return [this];
    var r2 = new Map(this.args.map((t3, n2) => ["${".concat(n2, "}"), t3])), e2 = t2.split(/(\${\d+})/).filter((t3) => t3 !== "");
    return e2.map((t3) => {
      var n2;
      return (n2 = r2.get(t3)) !== null && n2 !== void 0 ? n2 : t3;
    });
  }
  toJSON() {
    return { name: "InvariantError", message: this.message, description: this._n, code: this.code, args: this.args, stack: this.stack };
  }
  static setMessages(t2) {
    n = t2;
  }
  static create(t2, n2, e2, a2) {
    a2 != null && n2.push(a2);
    var o2 = new r(t2, n2, e2);
    return o2.stack = a2 == null ? void 0 : a2.stack, o2._n = e2, o2;
  }
};
var e = /* @__PURE__ */ new WeakMap();
async function a(t2, n2) {
  const a2 = e.get(t2);
  if (a2 != null)
    return await a2;
  !function(t3) {
    t3.Grammarly == null && (t3.Grammarly = {});
  }(t2);
  const o2 = new Promise((e2, a3) => {
    try {
      let e3 = function(t3, n3) {
        return t3.document.querySelectorAll(`script[src^="${n3.replace(/\?.*$/, "")}"]`)[0];
      }(t2, n2);
      e3 != null ? o3() : (e3 = function(t3, n3) {
        const r2 = t3.document.createElement("script");
        return r2.src = n3, t3.document.head.appendChild(r2), r2;
      }(t2, n2), e3.addEventListener("load", o3), e3.addEventListener("error", function() {
        try {
          throw new r(23, []);
        } catch (t3) {
          a3(t3);
        }
      }));
    } catch (t3) {
      return a3(t3);
    }
    function o3() {
      try {
        if (t2.Grammarly == null || typeof t2.Grammarly.EditorSDK != "function")
          throw new r(22, []);
        e2(t2.Grammarly);
      } catch (t3) {
        a3(t3);
      }
    }
  });
  return e.set(t2, o2), await o2;
}
async function o(t2, n2, r2) {
  return await s("@grammarly/editor-sdk", t2, n2, r2);
}
async function s(t2, n2, e2, o2) {
  if (typeof window == "undefined" && o2 === void 0)
    throw new r(21, []);
  const s2 = function(t3) {
    return t3.location.origin !== "null" ? t3.location.origin : t3.origin !== "null" ? t3.origin : "null";
  }(o2 != null ? o2 : window);
  s2 === "null" && (o2 != null ? o2 : window).top !== (o2 != null ? o2 : window) && console.warn("Grammarly is not supported in IFrames with `null` origin. Consider adding `sandbox='allow-same-origin allow-scripts'` to <iframe> element.");
  const i = new URL("https://js.grammarly.com/grammarly-editor-sdk@2.3", s2);
  n2 != null && i.searchParams.set("clientId", n2), i.searchParams.set("packageName", t2);
  const c = await a(o2 != null ? o2 : window, i.toString());
  if (n2 != null)
    return new c.EditorSDK(n2, e2);
}

// plugin.ts
var initializeGrammarly = async (view, settings) => {
  var _a;
  const grammarly = await o(settings.client_id);
  grammarly.addPlugin(view.contentDOM, {
    documentDialect: "auto-text",
    documentDomain: "academic",
    activation: "immediate"
  }, view.scrollDOM);
  const host = document.querySelector("grammarly-editor-plugin");
  const style = document.createElement("style");
  let inner_html = `
	.nvqxur1>:nth-child(2):not(article)
	{
		left: 80px !important;
	}

	div:has(div[aria-label="Grammarly Settings"])
	{
		left: 80px !important;
	}

	div[role="tooltip"] {
		left: 80px !important;
	}
	`;
  if (settings.left_offset != "0") {
    inner_html = inner_html + `
			.nvqxur1 div[role=dialog]
			{
				left: ` + settings.left_offset + `px !important;
			}`;
  }
  if (settings.top_offset != "0") {
    inner_html = inner_html + `
			.nvqxur1 div[role=dialog]
			{
				top: ` + settings.top_offset + `px !important;
			}`;
  }
  style.innerHTML = inner_html;
  (_a = host == null ? void 0 : host.shadowRoot) == null ? void 0 : _a.appendChild(style);
  host == null ? void 0 : host.setAttribute("config.oauthRedirectUri", "obsidian://grammarly-auth");
};
var authenticateGrammarlyUser = async (url, settings) => {
  const grammarly = await o(settings.client_id);
  grammarly.handleOAuthCallback(url);
};
var GrammarlyPlugin = class {
  constructor(view) {
  }
  update(update) {
  }
  destroy() {
  }
  initialize(view, settings) {
    return initializeGrammarly(view, settings);
  }
  authenticateUser(url, settings) {
    return authenticateGrammarlyUser(url, settings);
  }
};
var grammarlyPlugin = import_view.ViewPlugin.fromClass(GrammarlyPlugin);

// main.ts
var DEFAULT_SETTINGS = {
  left_offset: "0",
  top_offset: "0",
  client_id: "client_DNSZ5n1LBKo8CDovJJ85DT",
  disable_tooltip: "true"
};
var ObsidianGrammarlyPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.extArray = [];
  }
  async onload() {
    await this.loadSettings();
    (0, import_obsidian.addIcon)("grammarly", '<svg fill="currentColor"  viewBox="0 0 24 24" role="img" xmlns="http://www.w3.org/2000/svg"><path fill="currentColor" d="M24 12c0 6.627-5.373 12-12 12S0 18.627 0 12C0 5.372 5.373 0 12 0c6.628 0 12 5.372 12 12m-9.633 1.626a.81.815 0 0 0-.799.965c.071.393.44.662.84.662h1.257l.729-.102c-1.166 1.71-3.19 2.498-5.405 2.15-1.802-.282-3.35-1.502-4.003-3.205-1.483-3.865 1.34-7.556 5.02-7.556 1.916 0 3.598 1.122 4.562 2.478.277.39.763.504 1.133.248a.795.8 0 0 0 .236-1.069h.006a7.04 7.04 0 0 0-6.425-3.233c-3.508.236-6.347 3.107-6.55 6.617-.233 4.086 3.007 7.421 7.037 7.421a6.976 6.976 0 0 0 5.304-2.413l-.153.855v.773c0 .4.269.77.662.84a.814.814 0 0 0 .964-.8v-4.63h-4.415"/></svg>');
    const ribbonIconEl = this.addRibbonIcon("grammarly", "Enable Grammarly", (evt) => {
      this.enableGrammarly();
    });
    this.registerObsidianProtocolHandler("grammarly-auth", (res) => {
      const url = `obsidian://grammarly-auth?code=${res.code}&state=${res.state}`;
      this.enableGrammarlyLogin(url);
    });
    this.addCommand({
      id: "enable-grammarly",
      name: "Enable Grammarly",
      editorCallback: (editor, view) => {
        this.enableGrammarly();
      }
    });
    if (!this.ext) {
      this.ext = grammarlyPlugin;
      this.extArray = [this.ext];
      this.registerEditorExtension(this.extArray);
    }
    this.addSettingTab(new MainSettingsTab(this.app, this));
  }
  onunload() {
  }
  enableGrammarly() {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (app.vault.getConfig("vimMode")) {
      const cm = view.editor.cm.cm;
      window.CodeMirrorAdapter.Vim.handleKey(cm, "i", "mapping");
    }
    new import_obsidian.Notice("Grammarly has been enabled.");
    if (!view) {
      new import_obsidian.Notice("No active view found.");
      return;
    }
    const editorView = view.editor.cm;
    const plugin = editorView.plugin(grammarlyPlugin);
    if (plugin) {
      let tooltip_callback = function(mutations) {
        for (var i = 0; i < mutations.length; i++) {
          var mutation = mutations[i];
          if (mutation.addedNodes.length > 0) {
            for (var ii = 0; ii < mutation.addedNodes.length; ii++) {
              var node = mutation.addedNodes[ii];
              if (node.innerText == "Grammarly-powered editor" || node.innerText == "Grammarly-powered editor\u2014To review writing suggestions, press \u2318\u2303g") {
                node.remove();
              }
            }
          }
        }
      };
      plugin.initialize(editorView, this.settings);
      const tooltip_observer = new MutationObserver(tooltip_callback);
      const tooltip_observer_element = document.querySelector("body");
      console.log(this.settings);
      if (this.settings.disable_tooltip == "true") {
        tooltip_observer.observe(tooltip_observer_element, {
          childList: true
        });
      }
    }
  }
  enableGrammarlyLogin(url) {
    var _a, _b, _c;
    const view = (_c = (_b = (_a = this == null ? void 0 : this.app) == null ? void 0 : _a.workspace) == null ? void 0 : _b.activeLeaf) == null ? void 0 : _c.view;
    if (view != null) {
      const editorView = view.editor.cm;
      const plugin = editorView.plugin(grammarlyPlugin);
      if (plugin) {
        plugin.authenticateUser(url, this.settings);
      }
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var MainSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Grammarly Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Left Popover Offset (in pixels)").setDesc("The Grammarly popover is placed incorrectly when using certain themes. If you encoutner this, this setting allows you to offset it to the left it so that it looks right.").addText((text) => text.setPlaceholder("Enter offset (in pixels)").setValue(this.plugin.settings.left_offset).onChange(async (value) => {
      this.plugin.settings.left_offset = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Top Popover Offset (in pixels)").setDesc("The Grammarly popover is placed incorrectly when using certain themes. If you encoutner this, this setting allows you to offset it from the top so that it looks right.").addText((text) => text.setPlaceholder("Enter offset (in pixels)").setValue(this.plugin.settings.top_offset).onChange(async (value) => {
      this.plugin.settings.top_offset = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Grammarly Client ID").setDesc("The Grammarly Editor SDK requires a client ID to operate. One is included by default, but you can change it if you like.").addText((text) => text.setPlaceholder("Client ID").setValue(this.plugin.settings.client_id).onChange(async (value) => {
      this.plugin.settings.client_id = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove Grammarly tooltip").setDesc("Set to false to show tooltip.").addText((text) => text.setPlaceholder("Remove tooltip").setValue(this.plugin.settings.disable_tooltip).onChange(async (value) => {
      this.plugin.settings.disable_tooltip = value;
      await this.plugin.saveSettings();
    }));
  }
};
/**
 * @license
 * (c) Copyright 2023 Grammarly, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//# sourceMappingURL=data:application/json;base64,
