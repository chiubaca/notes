/**
 * This is required because Obsidan creates backlinks to other markdown files with the extension `.md`.
 * These links persist to website and causes an invalid url.
 * So the purpose of this script is build a list of all markdown files to redirect to url without a `.md` extension.
 * This script will construct a` _redirects` file, which Netlify uses to handle the redirecting.
 * https://docs.netlify.com/routing/redirects/#syntax-for-the-redirects-file
 */

const fs = require("fs");

// file paths pages
const indexNotesDir = "./src/pages/index-notes";
const literatureNotesDir = "./src/pages/literature-notes";
const fleetingNotesDir = "./src/pages/fleeting-notes";
const permanentNotesDir = "./src/pages/permanent-notes";

// read the file to get an array of file in the directory
const indexNotesFileNames = fs.readdirSync(indexNotesDir);
const literatureNotesFileNames = fs.readdirSync(literatureNotesDir);
const fleetingNotesFileNames = fs.readdirSync(fleetingNotesDir);
const permanentNotesFileNames = fs.readdirSync(permanentNotesDir);

// loop over each of the filename to build a string for netlify _redirects file
const indexNoteRedirects = indexNotesFileNames.map((fileName) => {
  const fileWithoutExtension = fileName.split(".")[0];
  return `/index-notes/${fileName}  /index-notes/${fileWithoutExtension}`;
});

const literatureNoteRedirects = literatureNotesFileNames.map((fileName) => {
  const fileWithoutExtension = fileName.split(".")[0];
  return `/literature-notes/${fileName}  /literature-notes/${fileWithoutExtension}`;
});

const fleetingNoteRedirects = fleetingNotesFileNames.map((fileName) => {
  const fileWithoutExtension = fileName.split(".")[0];
  return `/fleeting-notes/${fileName}  /fleeting-notes/${fileWithoutExtension}`;
});

const permanentNoteRedirects = permanentNotesFileNames.map((fileName) => {
  const fileWithoutExtension = fileName.split(".")[0];
  return `/permanent-notes/${fileName}  /permanent-notes/${fileWithoutExtension}`;
});

const allRedirects = [
  `
# THIS FILE IS AUTOGENERATED BY updateRedirects.js.
  `,
  "# INDEX NOTES",
  ...indexNoteRedirects,
  "# LITERATURE NOTES",
  ...literatureNoteRedirects,
  "# FLEETING NOTES",
  ...fleetingNoteRedirects,
  "# PERMANENT NOTES",
  ...permanentNoteRedirects,
].join("\n");

fs.writeFile("./public/_redirects", allRedirects, (err) => {
  if (err) {
    return console.log(err);
  }
  console.log("Netlify _redirects file was updated");
});
